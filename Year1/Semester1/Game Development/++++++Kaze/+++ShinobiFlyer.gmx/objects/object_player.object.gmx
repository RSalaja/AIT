<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprite_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Variables
hsp = 0;
vsp = 0;
walkSpeed = 3;
walkAcceleration = 1.5;
hsp_fric_ground = 0.50;
hsp_fric_air = 0;
jumpspeed = 6;
grv = 0.3;
hsp_frac = 0.0;
vsp_frac = 0.0;
state = pState.normal


enum pState
{
    normal,
    swing
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var key_left = keyboard_check(ord("A")) || keyboard_check(vk_left);
var key_right = keyboard_check(ord("D")) || keyboard_check(vk_right);
var key_jump = keyboard_check_pressed(ord("W")) || keyboard_check(vk_space);
var key_up = keyboard_check_pressed(ord("Q"))
var key_down = keyboard_check_pressed(ord("E"))
var left_click = mouse_check_button_pressed(mb_left)
var left_released = mouse_check_button_released(mb_left)

var right_click = mouse_check_button_pressed(mb_right)

grounded = (place_meeting(x,y+1,object_wall));

switch (state)
{    
   case pState.normal:
   {
        var dir = key_right - key_left;
        hsp += dir * walkAcceleration;
        
        if (dir ==0)
        {
            var hsp_fric = hsp_fric_ground;
            if(!grounded) hsp_fric = hsp_fric_air;
            hsp = Approach(hsp,0,hsp_fric);
        }
        hsp = clamp(hsp,-walkSpeed,walkSpeed);
        
        //Vertical Movement
        vsp += grv
        
        //Ground Jump
        if (key_jump) &amp;&amp; (grounded)
        {
            grounded = false;
            vsp_frac = 0;
            vsp = -jumpspeed;
        }

        if (mouse_check_button(mb_middle))
        {
            grappleX = mouse_x;
            grappleY = mouse_y; 
            ropeX = x;
            ropeY = y;
            ropeAngleVelocity = 0;
            ropeAngle = point_direction(grappleX,grappleY,x,y);
            ropeLength = 20;
            state = pState.swing;
        }
        
   }
   break;
   
   case pState.swing:
   {
        var _ropeAngleAcceleration = -0.2 * dcos(ropeAngle);
        _ropeAngleAcceleration += (key_right - key_left) * 0.08;
        ropeLength += (key_down - key_up) * 2;
        ropeLength = max(ropeLength,0);
        
        ropeAngleVelocity += _ropeAngleAcceleration;
        ropeAngle += ropeAngleVelocity;
        ropeAngleVelocity *= 0.99;
        
        ropeX = grappleX + lengthdir_x(ropeLength, ropeAngle);
        ropeY = grappleY + lengthdir_y(ropeLength, ropeAngle);
        hsp = ropeX - x;
        vsp = ropeY - y;
        
        if (left_released)
        {
            state = pState.normal;
            vsp_frac = 0;
            vsp = -jumpspeed;
        }
   
      
   }
   break;
}

hsp += hsp_frac;
vsp += vsp_frac;
hsp_frac = frac(hsp);
vsp_frac = frac(vsp);
hsp -= hsp_frac;
vsp -= vsp_frac;

//Horiziontal Collision
if (place_meeting(x+hsp,y,object_wall))
{
   var hstep = sign(hsp);
   hsp = 0;
   hsp_frac = 0;
   while (!place_meeting(x+hstep,y,object_wall)) x += hstep;
   if (state == pState.swing)
    {
        ropeAngle = point_direction(grappleX,grappleY,x,y)
        ropeAngleVelocity = 0;
    }
}
x = x + hsp;

//Verical Collision
if (place_meeting(x,y+vsp,object_wall))
{
    var vstep = sign(vsp);
    vsp = 0;
    vsp_frac = 0;
    while (!place_meeting(x,y+vstep,object_wall)) y += vstep;
    if (state == pState.swing)
    {
        ropeAngle = point_direction(grappleX,grappleY,x,y)
        ropeAngleVelocity = 0;
    }
}
y = y + vsp;

//Animation
scr_animation();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
