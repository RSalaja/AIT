<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_bo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1530494976</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
enum aState
{
    normal,
    bounceUp,
    bounceDown
}

state = pState.normal
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var key_left = keyboard_check(ord("A")) || keyboard_check(vk_left);
var key_right = keyboard_check(ord("D")) || keyboard_check(vk_right);
var key_jump = keyboard_check_pressed(ord("W")) || keyboard_check(vk_space);
var key_up = keyboard_check_pressed(ord("Q"))
var key_down = keyboard_check_pressed(ord("E"))
var left_click = mouse_check_button_pressed(mb_left)
var left_released = mouse_check_button_released(mb_left)
var right_click = mouse_check_button_pressed(mb_right)
bo_bounce = 0
bo_power = 2;

x = object_player.x + 10;
y = object_player.y ;
direction = point_direction(x,y,mouse_x,mouse_y)
image_angle = direction

switch(state)
{
    case aState.normal: 
    {
        if (left_click)
        {
         x += lengthdir_x(10,direction)
         y += lengthdir_y(10,direction)
        }
        if (place_meeting(x,y,object_wall)) &amp;&amp; (left_click)
        {
        state = aState.bounceUp;
        }
        if (place_meeting(x,y,object_wall)) &amp;&amp; (left_click)
        {
        state = aState.bounceDown;
        }
    }
    break;

}



        

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
