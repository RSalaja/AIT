// 2020-01-06 21:01:40
#event create
/*-------------------------------------
        Initialize Variables
--------------------------------------*/
scr_getInput()
canbounce = 0;
bo_delay = 0;
bo_delay_max = 17;

/*------------------
        States                  
------------------*/
enum aState
{
    normal,
    bounce,
    attack,
}

state = pState.normal

#event step_begin
/*---------------------------
           Control                           
---------------------------*/
if (hascontrol)
{
    scr_getInput();
}
else
{
    scr_no_input();
}

/*--------------------------
         Variables                     
--------------------------*/
scr_Globals();
bo_bounce = 0
bo_power = 2;
var bo_angle = image_angle

/*--------------------------
        Image Control                     
--------------------------*/
direction = point_direction(x, y, mouse_x, mouse_y)
image_angle = direction;
if (object_player.image_xscale <= 0)
{
    x = object_player.x - 6;
    y = object_player.y + 6;
}

if (object_player.image_xscale >= 0)
{
    x = object_player.x + 6;
    y = object_player.y + 6;
}

/*------------------
        States                  
------------------*/
switch (state)
{
    case aState.normal:
    {
        if (place_meeting(x, y, object_wall))
        {
            state = aState.bounce;
        }
        if (key_attack)
        {
            state = aState.attack;
        }

    }
    break;

    case aState.bounce:
    {
        airtime = 1;
    
        if (place_meeting(x, y, object_wall)) && (left_click)
        {
            audio_play_sound(Hit, 11, false)
            bo_delay = bo_delay_max
            repeat(5)
            with(instance_create(x, y, object_brownSpark))
            {
                depth = -100;
            }
    
    
            with(object_player)
            {
                scr_movement();
                var bo_angle = image_angle
                bo_bounce = 9
                direction = point_direction(x, y, mouse_x, mouse_y)
                grounded = false;
    
                vsp = -lengthdir_y(bo_bounce, direction);
                hsp = -lengthdir_x(bo_bounce, direction);
    
                state = aState.normal
    
                hsp_frac = 0
                vsp_frac = 0
    
            }
            if (!place_meeting(x, y, object_wall)) && (left_click)
            {
                state = aState.normal
            }
        }
    }
}

#event collision:object_parenthitable
/*------------------------------
          Collisions
-------------------------------- 
       Wall, Crates, Etc.
------------------------------*/
if (left_click)
{
    with(other)
    {
        hp--;
        flash = 3;
    }

    with(object_newCamera)
    {
        shake = 5;
    }
}