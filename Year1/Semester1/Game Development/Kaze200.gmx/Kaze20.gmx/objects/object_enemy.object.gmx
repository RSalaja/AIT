<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>object_enemyhitable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Variables
vsp = 0;
grv = 0.3;
walksp = 0.5;
hsp = walksp;


hp = 4;
flash = 0;

counter = 0;

//  States For The Enmey
 

enum states
{
     idle,
     wander,
     alert,
     attack     
}


state = states.idle


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == states.idle)
{
    // Timer //
    counter += 1;
    scr_enemy_movement();
    
    // Triggers //
    if (counter &gt;= room_speed * 3)      // 3 Seconds //
    {
         state = states.wander;
    }
    if (collision_circle(x,y,64,object_player,false,false))
    {
        state = states.alert;
    }
    // Sprite //   
    scr_animation_Skeleton();
    
}

else if(state == states.wander)
{
    // Movement //
    counter += 1;
    scr_enemy_movement();
    
    // Triggers //
    if (counter &gt;= room_speed * 3)      // 3 Seconds //
    {
        var change = choose(0,1);
        state = states.idle;
            
    }
    if (collision_circle(x,y,64,object_player,false,false))
    {
        state = states.alert;
    }
    // Sprite //   
    scr_animation_Skeleton();
}

else if(state == states.alert)
{
    /* Movement 
    var distance = point_distance(x,y,object_player.x,object_player.y);
    if distance &gt; 32
    {
        move_and_collide(image_xscale * 1,0);
    }
    break;
    */
    // Triggers //
    if (collision_circle(x,y,64,object_player,false,false))
    {
        state = states.idle;
    }
    
    if (collision_circle(x,y,32,object_player,false,false))
    {
        state = states.attack;
    }
    // Sprite //   
    scr_animation_Skeleton();
}

else if(state == states.attack)
{   
    // Attack //
    if (image_index &gt;= 5) &amp;&amp; (image_index &lt;=8)
    {
        with (instance_create(x,y,object_hitbox))
        {
            image_xscale = other.image_xscale;
            with (instance_place(x,y,object_player))
            {
                if (hit ==0)
                {
                    hit = 1;
                    vsp = -3;
                    hsp = sign(x - other.x) * 4;
                    image_xscale = sign(hsp)
                }
            }
        }
    }
     // Triggers //
    if (collision_circle(x,y,64,object_player,false,false))
    {
        state = states.idle;
    }
    scr_animation_Skeleton();
}

 
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (flash &gt; 0)
{
    flash--;
    shader_set(shader_white);
    draw_self();
    shader_reset();
} 


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
